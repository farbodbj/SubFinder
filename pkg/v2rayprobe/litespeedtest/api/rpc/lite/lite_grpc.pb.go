// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: lite.proto

package lite

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TestProxyClient is the client API for TestProxy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestProxyClient interface {
	StartTest(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (TestProxy_StartTestClient, error)
}

type testProxyClient struct {
	cc grpc.ClientConnInterface
}

func NewTestProxyClient(cc grpc.ClientConnInterface) TestProxyClient {
	return &testProxyClient{cc}
}

func (c *testProxyClient) StartTest(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (TestProxy_StartTestClient, error) {
	stream, err := c.cc.NewStream(ctx, &TestProxy_ServiceDesc.Streams[0], "/liteproxy.TestProxy/StartTest", opts...)
	if err != nil {
		return nil, err
	}
	x := &testProxyStartTestClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TestProxy_StartTestClient interface {
	Recv() (*TestReply, error)
	grpc.ClientStream
}

type testProxyStartTestClient struct {
	grpc.ClientStream
}

func (x *testProxyStartTestClient) Recv() (*TestReply, error) {
	m := new(TestReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TestProxyServer is the server API for TestProxy service.
// All implementations must embed UnimplementedTestProxyServer
// for forward compatibility
type TestProxyServer interface {
	StartTest(*TestRequest, TestProxy_StartTestServer) error
	mustEmbedUnimplementedTestProxyServer()
}

// UnimplementedTestProxyServer must be embedded to have forward compatible implementations.
type UnimplementedTestProxyServer struct {
}

func (UnimplementedTestProxyServer) StartTest(*TestRequest, TestProxy_StartTestServer) error {
	return status.Errorf(codes.Unimplemented, "method StartTest not implemented")
}
func (UnimplementedTestProxyServer) mustEmbedUnimplementedTestProxyServer() {}

// UnsafeTestProxyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestProxyServer will
// result in compilation errors.
type UnsafeTestProxyServer interface {
	mustEmbedUnimplementedTestProxyServer()
}

func RegisterTestProxyServer(s grpc.ServiceRegistrar, srv TestProxyServer) {
	s.RegisterService(&TestProxy_ServiceDesc, srv)
}

func _TestProxy_StartTest_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TestRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TestProxyServer).StartTest(m, &testProxyStartTestServer{stream})
}

type TestProxy_StartTestServer interface {
	Send(*TestReply) error
	grpc.ServerStream
}

type testProxyStartTestServer struct {
	grpc.ServerStream
}

func (x *testProxyStartTestServer) Send(m *TestReply) error {
	return x.ServerStream.SendMsg(m)
}

// TestProxy_ServiceDesc is the grpc.ServiceDesc for TestProxy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TestProxy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "liteproxy.TestProxy",
	HandlerType: (*TestProxyServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartTest",
			Handler:       _TestProxy_StartTest_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "lite.proto",
}
