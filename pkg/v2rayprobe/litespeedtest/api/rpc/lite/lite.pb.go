// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.5
// source: lite.proto

package lite

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SpeedTestMode int32

const (
	SpeedTestMode_pingonly  SpeedTestMode = 0
	SpeedTestMode_speedonly SpeedTestMode = 1
	SpeedTestMode_all       SpeedTestMode = 2
)

// Enum value maps for SpeedTestMode.
var (
	SpeedTestMode_name = map[int32]string{
		0: "pingonly",
		1: "speedonly",
		2: "all",
	}
	SpeedTestMode_value = map[string]int32{
		"pingonly":  0,
		"speedonly": 1,
		"all":       2,
	}
)

func (x SpeedTestMode) Enum() *SpeedTestMode {
	p := new(SpeedTestMode)
	*p = x
	return p
}

func (x SpeedTestMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpeedTestMode) Descriptor() protoreflect.EnumDescriptor {
	return file_lite_proto_enumTypes[0].Descriptor()
}

func (SpeedTestMode) Type() protoreflect.EnumType {
	return &file_lite_proto_enumTypes[0]
}

func (x SpeedTestMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SpeedTestMode.Descriptor instead.
func (SpeedTestMode) EnumDescriptor() ([]byte, []int) {
	return file_lite_proto_rawDescGZIP(), []int{0}
}

type PingMethod int32

const (
	PingMethod_googleping PingMethod = 0
	PingMethod_tcpping    PingMethod = 1
)

// Enum value maps for PingMethod.
var (
	PingMethod_name = map[int32]string{
		0: "googleping",
		1: "tcpping",
	}
	PingMethod_value = map[string]int32{
		"googleping": 0,
		"tcpping":    1,
	}
)

func (x PingMethod) Enum() *PingMethod {
	p := new(PingMethod)
	*p = x
	return p
}

func (x PingMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PingMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_lite_proto_enumTypes[1].Descriptor()
}

func (PingMethod) Type() protoreflect.EnumType {
	return &file_lite_proto_enumTypes[1]
}

func (x PingMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PingMethod.Descriptor instead.
func (PingMethod) EnumDescriptor() ([]byte, []int) {
	return file_lite_proto_rawDescGZIP(), []int{1}
}

type SortMethod int32

const (
	SortMethod_speed  SortMethod = 0
	SortMethod_rspeed SortMethod = 1 // reverse speed
	SortMethod_ping   SortMethod = 2
	SortMethod_rping  SortMethod = 3 // reverse ping
)

// Enum value maps for SortMethod.
var (
	SortMethod_name = map[int32]string{
		0: "speed",
		1: "rspeed",
		2: "ping",
		3: "rping",
	}
	SortMethod_value = map[string]int32{
		"speed":  0,
		"rspeed": 1,
		"ping":   2,
		"rping":  3,
	}
)

func (x SortMethod) Enum() *SortMethod {
	p := new(SortMethod)
	*p = x
	return p
}

func (x SortMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SortMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_lite_proto_enumTypes[2].Descriptor()
}

func (SortMethod) Type() protoreflect.EnumType {
	return &file_lite_proto_enumTypes[2]
}

func (x SortMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SortMethod.Descriptor instead.
func (SortMethod) EnumDescriptor() ([]byte, []int) {
	return file_lite_proto_rawDescGZIP(), []int{2}
}

// The request message containing the user's name.
type TestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupName     string        `protobuf:"bytes,1,opt,name=GroupName,proto3" json:"GroupName,omitempty"`
	SpeedTestMode SpeedTestMode `protobuf:"varint,2,opt,name=SpeedTestMode,proto3,enum=liteproxy.SpeedTestMode" json:"SpeedTestMode,omitempty"`
	PingMethod    PingMethod    `protobuf:"varint,3,opt,name=PingMethod,proto3,enum=liteproxy.PingMethod" json:"PingMethod,omitempty"`
	SortMethod    SortMethod    `protobuf:"varint,4,opt,name=SortMethod,proto3,enum=liteproxy.SortMethod" json:"SortMethod,omitempty"`
	Concurrency   int32         `protobuf:"varint,5,opt,name=Concurrency,proto3" json:"Concurrency,omitempty"`
	TestMode      uint32        `protobuf:"varint,6,opt,name=TestMode,proto3" json:"TestMode,omitempty"`        // 0: all 1: speed only 2: ping only
	Subscription  string        `protobuf:"bytes,7,opt,name=Subscription,proto3" json:"Subscription,omitempty"` // subscription link, clash link, profile links
	Language      string        `protobuf:"bytes,8,opt,name=Language,proto3" json:"Language,omitempty"`
	FontSize      uint32        `protobuf:"varint,9,opt,name=FontSize,proto3" json:"FontSize,omitempty"`
	Theme         string        `protobuf:"bytes,10,opt,name=Theme,proto3" json:"Theme,omitempty"`
	Timeout       int64         `protobuf:"varint,11,opt,name=Timeout,proto3" json:"Timeout,omitempty"`
	OutputMode    uint32        `protobuf:"varint,12,opt,name=OutputMode,proto3" json:"OutputMode,omitempty"` // 0: base64 1:file path 2: no pic 3: json 4: txt
}

func (x *TestRequest) Reset() {
	*x = TestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lite_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestRequest) ProtoMessage() {}

func (x *TestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lite_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestRequest.ProtoReflect.Descriptor instead.
func (*TestRequest) Descriptor() ([]byte, []int) {
	return file_lite_proto_rawDescGZIP(), []int{0}
}

func (x *TestRequest) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *TestRequest) GetSpeedTestMode() SpeedTestMode {
	if x != nil {
		return x.SpeedTestMode
	}
	return SpeedTestMode_pingonly
}

func (x *TestRequest) GetPingMethod() PingMethod {
	if x != nil {
		return x.PingMethod
	}
	return PingMethod_googleping
}

func (x *TestRequest) GetSortMethod() SortMethod {
	if x != nil {
		return x.SortMethod
	}
	return SortMethod_speed
}

func (x *TestRequest) GetConcurrency() int32 {
	if x != nil {
		return x.Concurrency
	}
	return 0
}

func (x *TestRequest) GetTestMode() uint32 {
	if x != nil {
		return x.TestMode
	}
	return 0
}

func (x *TestRequest) GetSubscription() string {
	if x != nil {
		return x.Subscription
	}
	return ""
}

func (x *TestRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *TestRequest) GetFontSize() uint32 {
	if x != nil {
		return x.FontSize
	}
	return 0
}

func (x *TestRequest) GetTheme() string {
	if x != nil {
		return x.Theme
	}
	return ""
}

func (x *TestRequest) GetTimeout() int64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *TestRequest) GetOutputMode() uint32 {
	if x != nil {
		return x.OutputMode
	}
	return 0
}

// reply message
type TestReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int32  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	GroupName string `protobuf:"bytes,2,opt,name=GroupName,proto3" json:"GroupName,omitempty"`
	Remarks   string `protobuf:"bytes,3,opt,name=Remarks,proto3" json:"Remarks,omitempty"`
	Protocol  string `protobuf:"bytes,4,opt,name=Protocol,proto3" json:"Protocol,omitempty"` // v2ray trojan ss ssr
	Ping      string `protobuf:"bytes,5,opt,name=Ping,proto3" json:"Ping,omitempty"`
	AvgSpeed  int64  `protobuf:"varint,6,opt,name=AvgSpeed,proto3" json:"AvgSpeed,omitempty"`
	MaxSpeed  int64  `protobuf:"varint,7,opt,name=MaxSpeed,proto3" json:"MaxSpeed,omitempty"`
	IsOk      bool   `protobuf:"varint,8,opt,name=IsOk,proto3" json:"IsOk,omitempty"`
	Traffic   int64  `protobuf:"varint,9,opt,name=Traffic,proto3" json:"Traffic,omitempty"`
	Link      string `protobuf:"bytes,10,opt,name=Link,proto3" json:"Link,omitempty"`
}

func (x *TestReply) Reset() {
	*x = TestReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lite_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestReply) ProtoMessage() {}

func (x *TestReply) ProtoReflect() protoreflect.Message {
	mi := &file_lite_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestReply.ProtoReflect.Descriptor instead.
func (*TestReply) Descriptor() ([]byte, []int) {
	return file_lite_proto_rawDescGZIP(), []int{1}
}

func (x *TestReply) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TestReply) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *TestReply) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

func (x *TestReply) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *TestReply) GetPing() string {
	if x != nil {
		return x.Ping
	}
	return ""
}

func (x *TestReply) GetAvgSpeed() int64 {
	if x != nil {
		return x.AvgSpeed
	}
	return 0
}

func (x *TestReply) GetMaxSpeed() int64 {
	if x != nil {
		return x.MaxSpeed
	}
	return 0
}

func (x *TestReply) GetIsOk() bool {
	if x != nil {
		return x.IsOk
	}
	return false
}

func (x *TestReply) GetTraffic() int64 {
	if x != nil {
		return x.Traffic
	}
	return 0
}

func (x *TestReply) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

var File_lite_proto protoreflect.FileDescriptor

var file_lite_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x6c, 0x69, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x6c, 0x69,
	0x74, 0x65, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x22, 0xc3, 0x03, 0x0a, 0x0b, 0x54, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x0d, 0x53, 0x70, 0x65, 0x65, 0x64, 0x54, 0x65,
	0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6c,
	0x69, 0x74, 0x65, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x53, 0x70, 0x65, 0x65, 0x64, 0x54, 0x65,
	0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0d, 0x53, 0x70, 0x65, 0x65, 0x64, 0x54, 0x65, 0x73,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x50, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6c, 0x69, 0x74, 0x65,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x52, 0x0a, 0x50, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x35, 0x0a, 0x0a,
	0x53, 0x6f, 0x72, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x15, 0x2e, 0x6c, 0x69, 0x74, 0x65, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x53, 0x6f, 0x72,
	0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x0a, 0x53, 0x6f, 0x72, 0x74, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x6f, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x46, 0x6f, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x68,
	0x65, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0xfd, 0x01,
	0x0a, 0x09, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x52, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12,
	0x12, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x50,
	0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x41, 0x76, 0x67, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x41, 0x76, 0x67, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x4d, 0x61, 0x78, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x4d, 0x61, 0x78, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x49,
	0x73, 0x4f, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x49, 0x73, 0x4f, 0x6b, 0x12,
	0x18, 0x0a, 0x07, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x4c, 0x69, 0x6e,
	0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4c, 0x69, 0x6e, 0x6b, 0x2a, 0x35, 0x0a,
	0x0d, 0x53, 0x70, 0x65, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0c,
	0x0a, 0x08, 0x70, 0x69, 0x6e, 0x67, 0x6f, 0x6e, 0x6c, 0x79, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x61,
	0x6c, 0x6c, 0x10, 0x02, 0x2a, 0x29, 0x0a, 0x0a, 0x50, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x12, 0x0e, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x70, 0x69, 0x6e, 0x67,
	0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x74, 0x63, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x2a,
	0x38, 0x0a, 0x0a, 0x53, 0x6f, 0x72, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x09, 0x0a,
	0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x72, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x09,
	0x0a, 0x05, 0x72, 0x70, 0x69, 0x6e, 0x67, 0x10, 0x03, 0x32, 0x4a, 0x0a, 0x09, 0x54, 0x65, 0x73,
	0x74, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x3d, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x6c, 0x69, 0x74, 0x65, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e,
	0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x6c, 0x69,
	0x74, 0x65, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x30, 0x01, 0x42, 0x58, 0x0a, 0x1e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x78, 0x78, 0x66, 0x30, 0x39, 0x38, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x6c, 0x69, 0x74, 0x65, 0x42, 0x09, 0x4c, 0x69, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x50, 0x01, 0x5a, 0x29, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x78, 0x78, 0x66, 0x30, 0x39, 0x38, 0x2f, 0x6c, 0x69, 0x74, 0x65, 0x2d, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x6c, 0x69, 0x74, 0x65, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_lite_proto_rawDescOnce sync.Once
	file_lite_proto_rawDescData = file_lite_proto_rawDesc
)

func file_lite_proto_rawDescGZIP() []byte {
	file_lite_proto_rawDescOnce.Do(func() {
		file_lite_proto_rawDescData = protoimpl.X.CompressGZIP(file_lite_proto_rawDescData)
	})
	return file_lite_proto_rawDescData
}

var file_lite_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_lite_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_lite_proto_goTypes = []interface{}{
	(SpeedTestMode)(0),  // 0: liteproxy.SpeedTestMode
	(PingMethod)(0),     // 1: liteproxy.PingMethod
	(SortMethod)(0),     // 2: liteproxy.SortMethod
	(*TestRequest)(nil), // 3: liteproxy.TestRequest
	(*TestReply)(nil),   // 4: liteproxy.TestReply
}
var file_lite_proto_depIdxs = []int32{
	0, // 0: liteproxy.TestRequest.SpeedTestMode:type_name -> liteproxy.SpeedTestMode
	1, // 1: liteproxy.TestRequest.PingMethod:type_name -> liteproxy.PingMethod
	2, // 2: liteproxy.TestRequest.SortMethod:type_name -> liteproxy.SortMethod
	3, // 3: liteproxy.TestProxy.StartTest:input_type -> liteproxy.TestRequest
	4, // 4: liteproxy.TestProxy.StartTest:output_type -> liteproxy.TestReply
	4, // [4:5] is the sub-list for method output_type
	3, // [3:4] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_lite_proto_init() }
func file_lite_proto_init() {
	if File_lite_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_lite_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lite_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_lite_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_lite_proto_goTypes,
		DependencyIndexes: file_lite_proto_depIdxs,
		EnumInfos:         file_lite_proto_enumTypes,
		MessageInfos:      file_lite_proto_msgTypes,
	}.Build()
	File_lite_proto = out.File
	file_lite_proto_rawDesc = nil
	file_lite_proto_goTypes = nil
	file_lite_proto_depIdxs = nil
}
